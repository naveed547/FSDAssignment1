index.js

import theme from './styles/modules/theme';
<ThemeWrapper theme={theme}>
  <App />
</ThemeWrapper>


theme.js
import { createMuiTheme } from '@material-ui/core/styles';

import colors from '../colors';
import Theme from '../../ui-components/theme/theme';

const palette = {};

for (const key in colors) {
  if (colors.hasOwnProperty(key)) {
    palette[key] = colors[key];
  }
}

const propsOverrides = {};

function onPopoverClose() {
  window.onscroll = null;
}

if (typeof isIPAD === 'function' && isIPAD()) {
  propsOverrides.MuiPopover = {
    onEnter: function onPopoverEnter(el) {
      window.onscroll = () => {
        // popover backdrop
        if (el.previousElementSibling) {
          el.previousElementSibling.click();
        }
      };
    },
    onClose: onPopoverClose,
    onExit: onPopoverClose,
  };
}
const DEFAULT_SHADOW = '0px 2px 4px 0px rgba(0,0,0,0.1)';

const theme = createMuiTheme({
  colors: palette,
  printMedia: '@media print',
  breakpoints: {
    values: {
      xs: 0,
      sm: 360,
      md: 600,
      lg: 1024,
      xl: 1280,
    },
  },
  palette: {
    primary: {
      light: '#757ce8',
      main: '#002469',
      dark: '#002884',
      contrastText: '#fff',
      link: '#0521d8',
    },
    secondary: {
      light: '#ff7961',
      main: '#f44336',
      dark: '#ba000d',
      contrastText: '#000',
    },
    action: {
      hover: 'rgba(0,164,230,0.2)',
      selected: 'rgba(0,164,230,0.2)',
    },
    background: {
      card: '#dbe7ff',
      cardHeader: '#08197b',
      common: colors.background,
    },
    text: {
      link: '#00a6ec',
    },
    colors: palette,
  },
  typography: {
    fontFamily: "'OpenSans', Arial, sans-serif",
    fontFamilyBold: "'OpenSans-Bold', Arial, sans-serif",
    fontFamilyRegular: "'OpenSans-Regular', Arial, sans-serif",
    useNextVariants: true,

    h1: {
      color: colors.text,
      fontSize: '50px',
      fontWeight: 'bold',
      letterSpacing: 'normal',
      lineHeight: 62 / 50,
    },
    h2: {
      color: colors.text,
      fontSize: '42px',
      fontWeight: 'normal',
      letterSpacing: 'normal',
      lineHeight: 60 / 42,
    },
    h3: {
      color: colors.text,
      fontSize: '36px',
      fontWeight: 'normal',
      letterSpacing: 'normal',
      lineHeight: 57 / 36,
    },
    h4: {
      color: colors.buttonDarkBlue,
      fontSize: '24px',
      fontWeight: 'bold',
      letterSpacing: 'normal',
      lineHeight: 34 / 24,
    },
    h5: {
      color: colors.text,
      fontSize: '20px',
      fontWeight: 'normal',
      letterSpacing: 'normal',
      lineHeight: 30 / 20,
    },
    h6: {
      color: colors.text,
      fontSize: '18px',
      fontWeight: 'bold',
      letterSpacing: 'normal',
      lineHeight: 28 / 18,
    },
    body1: {
      color: colors.text,
      fontSize: '16px',
      fontWeight: 'normal',
      letterSpacing: 'normal',
      lineHeight: 24 / 16,
    },
    body2: {
      color: colors.text,
      fontSize: '14px',
      fontWeight: 'normal',
      letterSpacing: 'normal',
      lineHeight: 20 / 14,
    },
    caption: {
      color: colors.grey,
      fontSize: '12px',
      fontWeight: 'normal',
      letterSpacing: 'normal',
      lineHeight: 18 / 12,
    },
    display2: {
      color: colors.text,
      fontSize: 28,
      fontWeight: 'normal',
      letterSpacing: 'normal',
      lineHeight: 1,
    },
  },
  overrides: {
    MuiButton: {
      root: {
        transition: 'color .01s',
      },
    },
    MuiCheckbox: {
      root: {
        color: colors.grey,
      },
      colorPrimary: {
        '&$checked': {
          color: colors.cloudBlue,
        },
        '&$disabled': {
          color: colors.grey,
        },
      },
      colorSecondary: {
        '&$checked': {
          color: colors.green,
        },
        '&$disabled': {
          color: colors.grey,
        },
      },
    },
    MuiFab: {
      root: {
        backgroundColor: colors.dividerGrey,
        boxShadow: 'none',
        color: colors.primaryBlue,
      },
    },
    MuiInputLabel: {
      root: {
        color: colors.grey,
      },
    },
    MuiFilledInput: {
      root: {
        backgroundColor: 'white',
        '&:hover': {
          backgroundColor: 'white',
        },
        '&$focused': {
          backgroundColor: 'white',
        },
        '&$disabled': {
          backgroundColor: '#f0f0f0',
        },
      },
      input: {
        '& .MuiFormLabel-root': {
          padding: 0,
        },
      },
      adornedStart: {
        '&$disabled': {
          backgroundColor: '#eee',
        },
      },
      adornedEnd: {
        paddingRight: '0',

        '&$disabled': {
          backgroundColor: '#eee',
        },
      },
      underline: {
        '&$disabled:before': {
          borderBottom: '1px solid #dddddd',
        },
        '&:after': {
          borderBottom: `2px solid ${colors.accentMidBlue}`,
        },
      },
    },
    MuiFormControl: {
      root: {
        boxSizing: 'border-box',
        minHeight: '54px',
      },
    },
    MuiFormControlLabel: {
      label: {
        fontSize: '16px',

        '&$disabled': {
          color: colors.grey,
        },
      },
    },
    MuiFormHelperText: {
      root: {
        lineHeight: 1.2,
        marginTop: '0px',
        paddingTop: '8px',

        '&$error': {
          color: colors.errorTexts,
          backgroundColor: 'transparent',
        },
      },
    },
    MuiFormLabel: {
      root: {
        lineHeight: '0.7',
        whiteSpace: 'nowrap',

        '&$error': {
          color: colors.errorTexts,
        },

        '&$focused': {
          color: colors.accentMidBlue,
        },
      },
    },
    MuiInputBase: {
      root: {
        boxSizing: 'border-box',
      },
    },
    MuiInput: {
      input: {
        paddingLeft: '10px',
      },
      underline: {
        '&:after': {
          borderBottom: `2px solid ${colors.accentMidBlue}`,
        },
        '&$disabled:before': {
          borderBottom: `1px solid ${colors.dividerGrey}`,
        },
      },
      error: {
        backgroundColor: 'rgba(207, 16, 34, 0.1)',
      },
    },
    MuiInputAdornment: {
      filled: {
        '&$positionStart': {
          marginTop: '23px',
        },
      },
      positionStart: {
        marginLeft: '5px',
      },
    },
    MuiLinearProgress: {
      barColorPrimary: {
        backgroundColor: '#FFFFFF',
      },
      colorSecondary: {
        backgroundColor: 'transparent',
      },
      barColorSecondary: {
        backgroundColor: 'transparent',
      },
    },
    MuiRadio: {
      colorSecondary: {
        '&$checked': {
          color: colors.accentMidBlue,
        },
      },
    },
    MuiSelect: {
      select: {
        '&:hover': {
          backgroundColor: 'transparent!important',
        },
        '&:focus': {
          backgroundColor: 'transparent!important',
        },
      },
    },
    MuiTableCell: {
      head: {
        color: colors.text,
        fontWeight: 'bold',
        fontSize: '14px',
        marginLeft: '25px',
      },
      body: {
        marginLeft: '25px',
        marginTop: '10px',
        wordWrap: 'break-word',
      },
      root: {
        padding: Theme.spacing(0.5, 1, 0.5, 1),
        borderBottom: 0,
      },
      numeric: {
        textAlign: 'initial',
      },
    },
    MuiTableRow: {
      head: {
        '& th': {
          paddingTop: Theme.spacing(2),
          paddingBottom: '21px',
        },
      },
      root: {
        height: '80px',

        '&$hover:hover': {
          backgroundColor: `rgba(0, 0, 0, ${1 / 17})`,
        },
      },
    },
    MuiTableSortLabel: {
      root: {
        // As per ana need to comment first and test in ie11
        // maxWidth: 125
      },
    },
    MuiTouchRipple: {
      root: {
        color: 'rgba(0,154,217,0.6)!important',
      },
    },
    EnhancedTable: {
      root: {
        marginTop: '0px',
      },
    },
    MuiTypography: {
      body1: {
        overflowWrap: 'break-word',
        wordWrap: 'break-word',
        wordBreak: 'break-word',
      },
    },
  },
  props: propsOverrides,
  sizing: {
    maxWindowWidth: 1215,
  },
  spacing: 8,
  table: {
    head: {
      backgroundColor: '#dbe7ff',
    },
  },
  customShadows: {
    default: DEFAULT_SHADOW,
  },
});

theme.typography = Object.keys(theme.typography).reduce((acc, key) => {
  acc[key] = theme.typography[key];
  if (['h2'].includes(key)) {
    acc[key][theme.breakpoints.down('lg')] = {
      fontSize: '1.25rem',
      fontWeight: 'bold',
      lineHeight: 1.5,
    };
  }
  return acc;
}, {});

export default theme;

colors.js
export const colors = {
  primaryBlue: '#002469',
  primaryRed: '#E1091D',
  adaptiveBlue: '#0e2193',
  accentDarkGray: '#A9A8A9',
  accentLightGray: 'D8D1C9',
  accentDarkBlue: '#00466D',
  accentMidBlue: '#009AD9',
  accentDarkBrown: '#663A2A',
  accentLightBrown: '#B9561A',
  accentPink: '#F7A48C',
  actionAmber: '#EF970B',
  actionBlue: '#A1DCED',
  snackBarError: '#D83B48',
  errorTexts: '#CF1022',
  successGreen: '#3A8F3C',
  background: '#F8FAFB',
  outlines: '#DDDDDD',
  stepperInactive: '#D8D8D8',
  text: '#333333',
  buttonDarkBlue: '#0521d8',
  whiteBlue: '#dbe7ff',
  slate: '#333333',
  dividerGrey: '#dddddd',
  formGrey: '#f0f0f0',
  white: '#ffffff',
  orange: '#ff9e00',
  red: '#d0021b',
  green: '#63bd00',
  blue: '#4a90e2',
  allBlue: '#3c54e7',
  grey: '#767676',
  cloudBlue: '#00a4e6',
  darkBlue: '#08197b',
  chartGreen: '#32A093',
  chartPink: '#fe52a3',
  lightBlue: '#ccedfa',
  starColor: '#fcdc5d',
  linkBlue: '#19a5e9',
};

export const withOpacity = (hexCode, opacity) => {
  const rgb = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hexCode);
  if (!rgb) {
    return '';
  }
  return `rgba(${parseInt(rgb[1], 16)}, ${parseInt(rgb[2], 16)}, ${parseInt(rgb[3], 16)}, ${opacity})`;
};

export default colors;


ui/theme.js
import color from "./Color"

const theme = createMuiTheme({
  breakpoints: {
    values: {
      sm: 360,
      md: 768,
      lg: 1024,
      xl: 1280
    }
  },
  palette: {
    primary: {
      main: color.electricBlue
    },
  },
  typography: {
    fontFamily: "'OpenSans', Arial, sans-serif",
    fontFamilyRegular: "'OpenSans-Regular', Arial, sans-serif",
    fontFamilyBold: "'OpenSans-Bold', Arial, sans-serif",
  }

});

export default theme;

NXGTypography.style.js
import { makeStyles } from '@material-ui/core/styles';
import { isAdaptiveApp } from '../utility/utility';

const classes  = makeStyles(theme => ({
    display: {
        font: `50px/75px ${theme.typography.fontFamilyBold}`,
    },
    headline1: {
        font: `42px/63px ${theme.typography.fontFamily}`,
    },
    headline2: {
        font: `36px/54px ${theme.typography.fontFamily}`,
        [theme.breakpoints.down("md")]: {
            fontSize: '24px',
            lineHeight: '36px'
        }
    },
    headline2Emphasis: {
        font: `36px/54px ${theme.typography.fontFamilyBold}`,
        [theme.breakpoints.down("md")]: {
            fontSize: '24px',
            lineHeight: '36px'
        }
    },
    headline3: {
        font: `24px/36px ${theme.typography.fontFamilyBold}`,
        [theme.breakpoints.down("md")]: {
            fontSize: '20px',
            lineHeight: '30px',
            // fontFamily: isAdaptiveApp() ? theme.typography.fontFamily : theme.typography.fontFamilyBold,
            fontFamily: theme.typography.fontFamilyBold,
        },
    },
    headline3Regular: {
        font: `24px/36px ${theme.typography.fontFamily}`,
        [theme.breakpoints.down("md")]: {
            fontSize: '20px',
            lineHeight: '30px'
        }
    },
    headline3Fixed: {
        font: `24px/36px ${theme.typography.fontFamilyBold}`,
    },
    headline4: {
        font: `20px/30px ${theme.typography.fontFamilyBold}`,
        [theme.breakpoints.down("md")]: {
            fontSize: '16px',
            lineHeight: '24px',
        }
    },
    headline4Regular: {
        font: `20px/30px ${theme.typography.fontFamily}`,
        [theme.breakpoints.down("md")]: {
            // fontSize: isAdaptiveApp() ? 20 : 16,
            fontSize: 16,
        }
    },

    headline5: {
        font: `16px/24px ${theme.typography.fontFamilyBold}`,
        [theme.breakpoints.down("md")]: {
            fontSize: '14px',
            lineHeight: '21px'
        }
    },
    body1: {
        font: `16px/24px ${theme.typography.fontFamily}`,
        [theme.breakpoints.down("md")]: {
          fontSize: '14px',
          lineHeight: '21px',
      }
    },
    body1Emphasis: {
      font: `16px/24px ${theme.typography.fontFamilyBold}`,
      [theme.breakpoints.down("lg")]: {
        fontSize: '14px',
        lineHeight: '21px',
      },
      [theme.breakpoints.down("md")]: {
        // fontWeight: isAdaptiveApp() ? 'bold' : 'normal',
        fontWeight: 'normal',
      },
      [theme.breakpoints.down("sm")]: {
        fontSize: '12px',
        lineHeight: '21px',
      }
    },
    body2: {
        font: `14px/21px ${theme.typography.fontFamily}`,
    },
    body2Emphasis: {
        font: `14px/21px ${theme.typography.fontFamilyBold}`,
    },
    body0: {
        font: `16px/24px ${theme.typography.fontFamily}`,
    },
    body0Emphasis: {
        font: `16px/24px ${theme.typography.fontFamilyBold}`,
    },
    label: {
        font: `12px/18px ${theme.typography.fontFamily}`,
    },
    labelEmphasis: {
        font: `12px/18px ${theme.typography.fontFamilyBold}`,
    },

}));

export default classes;

NXGTypography.js

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import Link from '@material-ui/core/Link';
import Typography from '@material-ui/core/Typography';
import classes from './NXGTypography.style';

const NXGTypography = props => {
  const {
    style, color, type, link, className, ...otherProps
  } = props;
  if (link) {
    return <Link {...otherProps} className={classNames(classes()[type], className)} style={{ ...{ color }, ...style }} />;
  }
  return <Typography {...otherProps} className={classNames(classes()[type], className)} style={{ ...{ color }, ...style }} />;
};

NXGTypography.propTypes = {
  type: PropTypes.string,
  link: PropTypes.bool,
  color: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.shape(),
};


NXGTypography.defaultProps = {
  link: false,
  color: 'inherit',
  type: 'body1',
  className: '',
  style: null,
};

export default NXGTypography;

NXGMODAL.styles
import { makeStyles, withStyles } from '@material-ui/core/styles';
import Dialog from '@material-ui/core/Dialog';
import MuiDialogActions from '@material-ui/core/DialogActions';
import Color from '../theme/Color';

const useStyles = theme => ({
  root: {
    margin: 0,
    padding: theme.spacing(3),
    position: 'relative',
    minHeight: 36, // support modal header when there is no title
    [theme.breakpoints.down('md')]: {
      padding: theme.spacing(3, 2),
      minHeight: 30,
    },
  },
  closeButton: {
    paddingRight: 5,
    paddingLeft: 5,
    position: 'absolute',
    right: 17,
    top: 18,
    width: 'auto !important',
    zIndex: 5,
    [theme.breakpoints.up('lg')]: {
      right: 18,
      top: 20,
      paddingLeft: 12,
      paddingRight: 12,
    },
    color: Color.electricBlue,
    '&:hover': {
      color: Color.darkBlue,
      background: 'none',
    },
    '& .MuiSvgIcon-root': {
      fontSize: 35,
    },
  },
  editCloseMarginTop:{
    [theme.breakpoints.up('lg')]: {
      top: 20,
    },
    [theme.breakpoints.down('lg')]: {
      top: 17,
    },
  },
  titlePad: {
    paddingRight: theme.spacing(4),
  },
});

export const MuiDialog = withStyles(theme => ({
  paperWidthSm: {
    minWidth: 360,
  },
  paperWidthMd: {
    maxWidth: 'none',
    [theme.breakpoints.up('lg')]: {
      width: '488px',
    },
    [theme.breakpoints.up('xl')]: {
      width: '608px',
    },
  },
  paperWidthLg: {
    [theme.breakpoints.down('lg')]: {
      width: '656px',
    },
    [theme.breakpoints.up('xl')]: {
      width: '816px',
    },
  },
  paperWidthXl: {
    margin: 0,
    [theme.breakpoints.up('lg')]: {
      width: '824px',
    },
    [theme.breakpoints.up('xl')]: {
      width: '1232px',
    },
  },
  paperWidthMidXl: {
    margin: 0,
    [theme.breakpoints.up('lg')]: {
      width: '824px',
    },
    [theme.breakpoints.up('xl')]: {
      width: '1024px',
    },
  },
  paperWidthMidLg: {// for softToken
    margin: 0,
    [theme.breakpoints.up('lg')]: {
      width: '824px',
    },
    [theme.breakpoints.up('xl')]: {
      width: '1024px',
    },
  },
  paperFullScreen: {
    width: '100%',
    [theme.breakpoints.down('md')]: {
      '& .MuiDialogContent-root': {
        flex: '1 1 100%',
      },
    },
    paddingTop: window.cordova ? 'env(safe-area-inset-top, 0px)' : 0,
  },
  paper: {
    [theme.breakpoints.down('md')]: {
      maxHeight: 'calc(100% - 48px)',
      margin: theme.spacing(3, 0),
      width: '100%',
    },
  },
  paperScrollBody: {
    maxWidth: 'none!important',
    [theme.breakpoints.up('md')]: {
      margin: theme.spacing(6, 0),
    },
    [theme.breakpoints.down('md')]: {
      maxHeight: 'none',
      margin: theme.spacing(3, 0),
    },
  },
}))(Dialog);

export const useStylesContent = makeStyles(theme => ({
  root: {
    padding: 0,
    overflowX: 'hidden',
    position: 'relative',
    overflowWrap: 'break-word',
    wordWrap: 'break-word',
  },
  hasSpacing: {
    paddingLeft: theme.spacing(3),
    paddingRight: theme.spacing(3),
    [theme.breakpoints.down('md')]: {
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
    },
  },
  hasVerticalSpacing: {
    paddingTop: theme.spacing(3),
    paddingBottom: theme.spacing(4),
    [theme.breakpoints.down('md')]: {
      paddingBottom: theme.spacing(3),
    },
  },
  middleContent: {
    display: 'flex',
    color: Color.white,
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'column',
    textAlign: 'center', // for mobile
    height: '100%',
    padding: theme.spacing(5, 3),
    [theme.breakpoints.down('md')]: {
      padding: theme.spacing(1, 2, 3),
    },
  },
  blueTheme: {
    '& .MuiDialogTitle-root': {
      padding: 0,
      minHeight: 0,
    },
    '& .MuiPaper-root': {
      background: Color.midnightBlueBg,
      maxHeight: 'none',
      margin: 0,
    },
    '& .MuiSvgIcon-root': {
      color: Color.white,
    },
    '& .MuiDialogContent-root': {
      color: Color.white,
      border: 'none',
    },
  },
  noCloseIcon: {
    '& $middleContent': {
      paddingTop: 0,
      paddingBottom: 0,
    },
  },
  fullHeight: {
    '& .MuiPaper-root': {
      maxHeight: 'none',
      height: 'calc(100% - 96px)',
      [theme.breakpoints.down('md')]: {
        height: 'calc(100% - 48px)',
      },
    },
  },
  noBorderBottom: {
    '& .MuiDialogContent-dividers': {
      borderBottom: 'none',
    },
  },
  promptModal: {
    '& .MuiDialogTitle-root': {
      padding: 0,
      minHeight: 0,
    },
    '& .MuiDialogContent-root': {
      padding: theme.spacing(3, 6, 1, 2),
      border: 0,
      [theme.breakpoints.up('lg')]: {
        paddingLeft: theme.spacing(3),
      },
    },
    '& .MuiPaper-root': {
      position: 'absolute',
      bottom: 0,
      marginLeft: 0,
      marginRight: 0,
      marginBottom: 0,
      width: '100%',
      minWidth: 0,
      maxWidth: 'none',
    },
  },
}));

export const DialogActions = withStyles(theme => ({
  root: {
    margin: 0,
    padding: theme.spacing(2, 3),
    justifyContent: 'flex-start',
    [theme.breakpoints.down('md')]: {
      padding: theme.spacing(2),
    },
  },
  spacing: {
    '& > div': {
      [theme.breakpoints.down('md')]: {
        flexDirection: 'column-reverse',
      },
      '& .MuiButtonBase-root + .MuiButtonBase-root': {
        [theme.breakpoints.up('lg')]: {
          marginLeft: theme.spacing(2),
        },
      },
      '& .MuiButtonBase-root': {
        '& .MuiButton-label': {
          fontFamily: `${theme.typography.fontFamilyBold}!important`,
          font: `16px/24px ${theme.typography.fontFamilyBold}`,
          [theme.breakpoints.down('md')]: {
            fontSize: '14px',
            lineHeight: '21px',
            // fontWeight: isAdaptiveApp() ? 'bold' : 'normal',
            fontWeight: 'normal',
          },
        },
        [theme.breakpoints.down('md')]: {
          '&:last-child': {
            marginTop: 0,
          },
        },
      },
    },
  },
}))(MuiDialogActions);

export default useStyles;

NXGMODAL.JSX
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { withStyles } from '@material-ui/core/styles';
import MuiDialogTitle from '@material-ui/core/DialogTitle';
import MuiDialogContent from '@material-ui/core/DialogContent';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from './assets/close-20x20-blue.svg';
import NXGTypography from '../NXGTypography/NXGTypography';
import NXGTooltip from '../NXGTooltip/NXGTooltip';
import Color from '../theme/Color';
import useStyles, { DialogActions, MuiDialog, useStylesContent } from './NXGModal.style';
import {
  isTablet, enableTouch, disableTouch, canEnableDisableTouchForModal
} from '../utility/utility';

const DialogTitle = withStyles(useStyles)(props => {
  const {
    children, classes, onClose, noCloseIcon, disableCloseIcon, infoIconTooltip, editCloseMarginTop
  } = props;
  const { enableInfoIcon, infoIconTooltipMsg, infoIconPlacement, tooltipExtraStyle } = infoIconTooltip;
  let scrollBackup;
  useEffect(
    () => {
      scrollBackup = document.body.getBoundingClientRect().top;
      const root = document.getElementsByTagName('html')[0];
      const body = document.getElementsByTagName('body')[0];
      const msEdge = navigator.userAgent.indexOf('Edge') > -1;
      if (isTablet && root && root.style.position !== 'fixed') {
        root.style.overflow = 'hidden';
        root.style.height = '100%';
        root.style.width = '100%';
        root.style.position = 'fixed';
        body.style.marginTop = `${scrollBackup.toString()}px`;
        body.style.height = 'auto';
      }

      return () => {
        if (isTablet && root) {
          root.style = '';
          body.style.marginTop = 0;
          body.style.height = '100%';
          window.scrollTo(0, Math.abs(scrollBackup));
        }
      };
    },
    [],
  );
  return (
    <MuiDialogTitle disableTypography className={classes.root}>
      {children && (
        <NXGTypography type="headline3" className={classes.titlePad} color={Color.darkBlue} variant="h3">
          {children}
        </NXGTypography>
      )}
      {enableInfoIcon && (
        <IconButton
          aria-label="Tooltip"
          data-testid="DialogTitle-closeButton"
          id="nxgModal-closeButton"
          className={classes.closeButton}
        >
          <NXGTooltip
            tooltipExtraStyle={tooltipExtraStyle}
            data-testid="nxgTooltip-icon"
            insideModal
            content={infoIconTooltipMsg}
            popperModifiers={{
              flip: {
                enabled: false,
              },
            }}
            placement={infoIconPlacement || 'bottom'}
            color="blue"
          />
        </IconButton>
      )}
      {!noCloseIcon && (
        <IconButton aria-label="close" data-testid="DialogTitle-closeButton" id="nxgModal-closeButton" className={classNames(classes.closeButton, editCloseMarginTop ? classes.editCloseMarginTop:'')} onClick={onClose} disabled={disableCloseIcon}>
          <img src={CloseIcon} />
        </IconButton>)}
    </MuiDialogTitle>
  );
});

function Modal(props) {
  // console.log(props);
  const {
    modalTitle, scroll, canEnableDisableTouch, footer, children, onClose, open, hasSpacing, hasVerticalSpacing, bodyBg, blueTheme, middleContent, noCloseIcon, fullHeight, noBorderBottom, promptModal, disableCloseIcon, infoIconTooltip, editCloseMarginTop
  } = props;

  const titleProps = {
    modalTitle, children, noCloseIcon, disableCloseIcon, infoIconTooltip, editCloseMarginTop
  };

  const modalSelector = '.MuiDialog-root';
  const classes = useStylesContent();
  const [modalData, setModalData] = useState({
    id: '',
    isScroll: false,
  });

  const classesObj = classNames({
    [classes.root]: 'root',
    [classes.hasSpacing]: hasSpacing,
    [classes.hasVerticalSpacing]: hasVerticalSpacing,
    [classes.middleContent]: middleContent,
  });

  const classRoot = classNames({
    [classes.root]: 'root',
    [classes.blueTheme]: blueTheme,
    [classes.noCloseIcon]: noCloseIcon,
    [classes.fullHeight]: fullHeight,
    [classes.noBorderBottom]: noBorderBottom,
    [classes.promptModal]: promptModal,
  });
  useEffect(
    () => {
      if (canEnableDisableTouchForModal && open) {
        setTimeout(() => {
          const isScroll = scroll === 'body' || !canEnableDisableTouch;
          const fnExecute = isScroll ? enableTouch : disableTouch;
          const currentData = {
            id: `modalId${new Date().getTime()}`,
            isScroll,
          };
          setModalData(currentData);
          fnExecute();
        }, 100);
      }
      return () => {
        if (canEnableDisableTouchForModal) {
          enableTouch(modalSelector);
        }
      };
    },
    [open],
  );


  return (
    <MuiDialog disableBackdropClick {...props} open={open} classes={{ root: classRoot }} data-body-scroll={modalData.isScroll} data-modal-id={modalData.id}>
      <DialogTitle title {...titleProps} onClose={onClose}>
        {modalTitle}
      </DialogTitle>

      <MuiDialogContent dividers classes={{ root: classesObj }} style={{ backgroundColor: bodyBg }}>
        {children}
      </MuiDialogContent>
      {footer && <DialogActions>{footer}</DialogActions>}
    </MuiDialog>
  );
}

export default Modal;

Modal.propTypes = {
  modalType: PropTypes.string,
  modalTitle: PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
  footer: PropTypes.node,
  open: PropTypes.bool.isRequired,
  onClose: PropTypes.func,
  hasSpacing: PropTypes.bool,
  editCloseMarginTop: PropTypes.bool,
  hasVerticalSpacing: PropTypes.bool,
  bodyBg: PropTypes.string,
  blueTheme: PropTypes.bool,
  middleContent: PropTypes.bool,
  noCloseIcon: PropTypes.bool,
  fullHeight: PropTypes.bool,
  noBorderBottom: PropTypes.bool,
  promptModal: PropTypes.bool,
  disableCloseIcon: PropTypes.bool,
  canEnableDisableTouch: PropTypes.bool,
};

Modal.defaultProps = {
  modalType: 'medium',
  footer: null,
  onClose: null,
  hasSpacing: false,
  editCloseMarginTop:false,
  hasVerticalSpacing: false,
  bodyBg: undefined,
  blueTheme: false,
  middleContent: false,
  noCloseIcon: false,
  fullHeight: false,
  noBorderBottom: false,
  promptModal: false,
  disableCloseIcon: false,
  canEnableDisableTouch: false,
  infoIconTooltip: {},
};
